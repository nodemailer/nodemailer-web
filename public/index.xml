<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodemailer</title>
    <link>https://nodemailer.com/</link>
    <description>Recent content on Nodemailer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Jan 2017 21:25:35 +0200</lastBuildDate><atom:link href="https://nodemailer.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SMTP Server</title>
      <link>https://nodemailer.com/extras/smtp-server/</link>
      <pubDate>Sat, 21 Jan 2017 00:12:25 +0200</pubDate>
      
      <guid>https://nodemailer.com/extras/smtp-server/</guid>
      <description>Create SMTP and LMTP server instances on the fly. This is not a full-blown server application like Haraka but an easy way to add custom SMTP listeners to your app. This module is the successor for the server part of the (now deprecated) SMTP module simplesmtp. For matching SMTP client see smtp-connection.
This module does not make any email deliveries by itself. _smtp-server_ allows you to listen on ports 25/24/465/587 etc.</description>
    </item>
    
    <item>
      <title>SMTP Connection</title>
      <link>https://nodemailer.com/extras/smtp-connection/</link>
      <pubDate>Sat, 21 Jan 2017 00:12:25 +0200</pubDate>
      
      <guid>https://nodemailer.com/extras/smtp-connection/</guid>
      <description>SMTP client module to connect to SMTP servers and send mail with it.
This module is the successor for the client part of the (now deprecated) SMTP module simplesmtp. For matching SMTP server see smtp-server.
Usage Step 1. Install Nodemailer with npm smtp-connection is exposed as a submodule of Nodemailer
npm install nodemailer --save Step 2. Require smtp-connection in your script const SMTPConnection = require(&amp;#34;nodemailer/lib/smtp-connection&amp;#34;); Step 3. Create SMTPConnection instance let connection = new SMTPConnection(options); Where</description>
    </item>
    
    <item>
      <title>Migration</title>
      <link>https://nodemailer.com/about/migrate/</link>
      <pubDate>Fri, 20 Jan 2017 21:37:15 +0200</pubDate>
      
      <guid>https://nodemailer.com/about/migrate/</guid>
      <description>This migration document applies to migrating from Nodemailer 2 to Nodemailer 3, and to a lesser extent, to Nodemailer 4.
 Nodemailer v3 introduces several changes, removing some features from v2 and adding new functionality to improve the overall experience.
Major Changes in Nodemailer v3  Zero Dependencies: All external dependencies have been removed, reducing the installation time to less than 2 seconds from NPM. Templating Removed: Templating support was dropped as it caused confusion and would have required extensive support for multiple rendering engines.</description>
    </item>
    
    <item>
      <title>Mailparser</title>
      <link>https://nodemailer.com/extras/mailparser/</link>
      <pubDate>Sat, 21 Jan 2017 00:12:25 +0200</pubDate>
      
      <guid>https://nodemailer.com/extras/mailparser/</guid>
      <description>Advanced email parser for Node.js. Everything is handled as a stream which should make it able to parse even very large messages (100MB+) with relatively low overhead.
The module exposes two separate modes, a lower level MailParser class and simpleParser function. The latter is simpler to use (hence the name) but is less resource efficient as it buffers attachment contents in memory.
Install npm install mailparser --save simpleParser simpleParser is the easiest way to parse emails.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://nodemailer.com/about/license/</link>
      <pubDate>Fri, 20 Jan 2017 21:37:15 +0200</pubDate>
      
      <guid>https://nodemailer.com/about/license/</guid>
      <description>Nodemailer v4+ is licensed under the MIT license.
Version 3 of Nodemailer was licensed under the European Union Public License 1.1 (EUPL), which is a copyleft license. For more details on the decision to use EUPL for Nodemailer v3, you can refer to the Nodemailer blog. However, after a two-month experiment, I decided to revert Nodemailer back to the MIT license and canceled all active subscriptions.
Using a restrictive license for a lower-level infrastructure module like Nodemailer proved to be more problematic than beneficial.</description>
    </item>
    
    <item>
      <title>Mailcomposer</title>
      <link>https://nodemailer.com/extras/mailcomposer/</link>
      <pubDate>Sat, 21 Jan 2017 00:12:25 +0200</pubDate>
      
      <guid>https://nodemailer.com/extras/mailcomposer/</guid>
      <description>Generate RFC822 formatted e-mail messages that can be streamed to SMTP or file.
Usage Step 1. Install Nodemailer with npm mailcomposer is exposed as a submodule of Nodemailer
npm install nodemailer --save Step 2. Require mailcomposer in your script const MailComposer = require(&amp;#34;nodemailer/lib/mail-composer&amp;#34;); Step 3. Create a new MailComposer instance var mail = new MailComposer(mailOptions); Where mailOptions is an object that defines the components of the message, see below
API createReadStream To create a stream that outputs a raw rfc822 message from the defined input, use createReadStream()</description>
    </item>
    
    <item>
      <title>Node.js daemons</title>
      <link>https://nodemailer.com/extras/daemons/</link>
      <pubDate>Sat, 21 Jan 2017 00:12:25 +0200</pubDate>
      
      <guid>https://nodemailer.com/extras/daemons/</guid>
      <description>DRAFT
 This tutorial shows how to set up Node.js applications as daemon services under Linux. Specifically the following would apply:
 The daemon application is a Node.js web app Daemon is set up as a SystemD services Node.js app is accessed as a Nginx virtual domain Updates are deployed using git   Even though this tutorial uses a web app as the service daemon, then the same approach can be used for deploying any kind of services.</description>
    </item>
    
    <item>
      <title>SMTP? Say what?</title>
      <link>https://nodemailer.com/usage/why-smtp/</link>
      <pubDate>Sat, 21 Jan 2017 00:44:30 +0200</pubDate>
      
      <guid>https://nodemailer.com/usage/why-smtp/</guid>
      <description>You might wonder why you would need to set something up while in comparison PHP&amp;rsquo;s mail command works out of the box with no special configuration whatsoever. Just call mail(&amp;hellip;) and you&amp;rsquo;re already sending mail. So what&amp;rsquo;s going on in Node.js?
The difference is in the software stack required for your application to work. While Node.js stack is thin, all you need for your app to work is the node binary, then PHP&amp;rsquo;s stack is fat.</description>
    </item>
    
    <item>
      <title>Using Gmail</title>
      <link>https://nodemailer.com/usage/using-gmail/</link>
      <pubDate>Sat, 21 Jan 2017 00:25:10 +0200</pubDate>
      
      <guid>https://nodemailer.com/usage/using-gmail/</guid>
      <description>Even though Gmail is the fastest way to get started with sending emails, it is by no means a preferable solution unless you are using OAuth2 authentication. Gmail expects the user to be an actual user not a robot so it runs a lot of heuristics for every login attempt and blocks anything that looks suspicious to defend the user from account hijacking attempts. For example you might run into trouble if your server is in another geographical location – everything works in your dev machine but messages are blocked in production.</description>
    </item>
    
    <item>
      <title>Delivering bulk mail</title>
      <link>https://nodemailer.com/usage/bulk-mail/</link>
      <pubDate>Sat, 21 Jan 2017 00:40:56 +0200</pubDate>
      
      <guid>https://nodemailer.com/usage/bulk-mail/</guid>
      <description>Here are some tips how to handle bulk mail, for example if you need to send 10 million messages at once.
 Use a dedicated delivery provider. Do not use services that offer SMTP as a sideline or for free (that&amp;rsquo;s Gmail or the SMTP of your homepage hosting company) to send bulk mail – you&amp;rsquo;ll hit all the hard limits immediately or get labelled as spammer. Basically you get what you pay for and if you pay zero then your deliverability is near zero as well.</description>
    </item>
    
    <item>
      <title>Attachments</title>
      <link>https://nodemailer.com/message/attachments/</link>
      <pubDate>Sat, 21 Jan 2017 00:09:16 +0200</pubDate>
      
      <guid>https://nodemailer.com/message/attachments/</guid>
      <description>attachments option in the message object that contains an array of attachment objects.
Attachment object consists of the following properties:
 filename - filename to be reported as the name of the attached file. Use of unicode is allowed. content - String, Buffer or a Stream contents for the attachment path - path to the file if you want to stream the file instead of including it (better for larger attachments) href – an URL to the file (data uris are allowed as well) httpHeaders - optional HTTP headers to pass on with the href request, eg.</description>
    </item>
    
    <item>
      <title>Alternatives</title>
      <link>https://nodemailer.com/message/alternatives/</link>
      <pubDate>Sat, 21 Jan 2017 00:12:25 +0200</pubDate>
      
      <guid>https://nodemailer.com/message/alternatives/</guid>
      <description>In addition to text and HTML, any kind of data can be inserted as an alternative content of the main body - for example a word processing document with the same text as in the HTML field. It is the job of the email client to select and show the best fitting alternative to the reader. Usually this field is used for calendar events and such.
If you want to use a calendar event as the alternative, the consider using the **icalEvent** option instead.</description>
    </item>
    
    <item>
      <title>Address object</title>
      <link>https://nodemailer.com/message/addresses/</link>
      <pubDate>Fri, 20 Jan 2017 20:58:57 +0200</pubDate>
      
      <guid>https://nodemailer.com/message/addresses/</guid>
      <description>All email addresses can be plain email addresses
&amp;#39;foobar@example.com&amp;#39;  or with formatted name (includes unicode support)  &amp;#39;Ноде Майлер &amp;lt;foobar@example.com&amp;gt;&amp;#39; Notice that all address fields (even *from:*) are comma separated lists, so if you want to use a comma (or any other special symbol) in the name part, make sure you enclose the name in double quotes like this: `&#39;&#34;Майлер, Ноде&#34; &#39;`   or as an address object (in this case you do not need to worry about the formatting, no need to use quotes etc.</description>
    </item>
    
    <item>
      <title>Calendar events</title>
      <link>https://nodemailer.com/message/calendar-events/</link>
      <pubDate>Fri, 20 Jan 2017 12:01:43 +0200</pubDate>
      
      <guid>https://nodemailer.com/message/calendar-events/</guid>
      <description>Calendar events are tricky because different email clients handle these differently. Nodemailer uses the same style as Gmail for attaching calendar files which should ensure maximum compatibility. If you want to attach a calendar event to your email then you can use the message option icalEvent:
  icalEvent – an object to define calendar event
 method – optional method, case insensitive, defaults to &amp;lsquo;publish&amp;rsquo;. Other possible values would be &amp;lsquo;request&amp;rsquo;, &amp;lsquo;reply&amp;rsquo;, &amp;lsquo;cancel&amp;rsquo; or any other valid calendar method listed in RFC5546.</description>
    </item>
    
    <item>
      <title>Embedded images</title>
      <link>https://nodemailer.com/message/embedded-images/</link>
      <pubDate>Sat, 21 Jan 2017 00:09:24 +0200</pubDate>
      
      <guid>https://nodemailer.com/message/embedded-images/</guid>
      <description>Attachments can be used as embedded images in the HTML body. To use this feature, you need to set additional property of the attachment - cid (unique identifier of the file) which is a reference to the attachment file. The same cid value must be used as the image URL in HTML (using cid: as the URL protocol, see example below).
**NB!** the cid value should be as unique as possible!</description>
    </item>
    
    <item>
      <title>List headers</title>
      <link>https://nodemailer.com/message/list-headers/</link>
      <pubDate>Fri, 20 Jan 2017 12:01:57 +0200</pubDate>
      
      <guid>https://nodemailer.com/message/list-headers/</guid>
      <description>Nodemailer includes a helper for setting more complex List-* headers with ease. You can use this by providing message option list. It&amp;rsquo;s an object where key names are converted into list headers. List key help becomes List-Help header etc.
General rules
 If the value is a string, it is treated as an URL If you want to provide an optional comment, use {url:&amp;lsquo;url&amp;rsquo;, comment: &amp;lsquo;comment&amp;rsquo;} object If you want to have multiple header rows for the same List-* key, use an array as the value for this key If you want to have multiple URLs for single List-* header row, use an array inside an array List-* headers are treated as pregenerated values, this means that lines are not folded and strings are not encoded.</description>
    </item>
    
    <item>
      <title>Custom headers</title>
      <link>https://nodemailer.com/message/custom-headers/</link>
      <pubDate>Fri, 20 Jan 2017 12:37:05 +0200</pubDate>
      
      <guid>https://nodemailer.com/message/custom-headers/</guid>
      <description>Most messages do not need any kind of tampering with the headers. If you do need to add custom headers either to the message or to an attachment/alternative, you can add these values with the headers option. Values are processed automatically, non-ascii strings are encoded as mime-words and long lines are folded.
 headers – is an object of key-value pairs, where key names are converted into message header keys  Examples 1.</description>
    </item>
    
    <item>
      <title>Custom source</title>
      <link>https://nodemailer.com/message/custom-source/</link>
      <pubDate>Fri, 20 Jan 2017 12:37:52 +0200</pubDate>
      
      <guid>https://nodemailer.com/message/custom-source/</guid>
      <description>If you want to use your own custom generated RFC822 formatted message source, instead of letting Nodemailer to generate it from the message options, use option raw. This can be used both for the entire message or alternatively per-attachment or per-alternative.
Don&#39;t forget to set the **envelope** option when using **raw** as the message source  Examples 1. Use string as a message body This example loads the entire message source from a string value.</description>
    </item>
    
    <item>
      <title>SMTP envelope</title>
      <link>https://nodemailer.com/smtp/envelope/</link>
      <pubDate>Fri, 20 Jan 2017 11:20:07 +0200</pubDate>
      
      <guid>https://nodemailer.com/smtp/envelope/</guid>
      <description>SMTP envelope is usually auto generated from from, to, cc and bcc fields in the message object but if for some reason you want to specify it yourself (custom envelopes are usually used for VERP addresses), you can do it with the envelope property in the message object.
 envelope – is an object with the following address params that behave just like with regular mail options. You can also use the regular address format, unicode domains etc.</description>
    </item>
    
    <item>
      <title>Pooled SMTP</title>
      <link>https://nodemailer.com/smtp/pooled/</link>
      <pubDate>Fri, 20 Jan 2017 11:20:07 +0200</pubDate>
      
      <guid>https://nodemailer.com/smtp/pooled/</guid>
      <description>If pooling is used then Nodemailer keeps a fixed amount of connections open and sends the next message once a connection becomes available. It is mostly useful when you have a large number of messages that you want to send in batches or your provider allows you to only use a small amount of parallel connections.
To use pooled connections use the following options in transport configuration
 pool – set to true to use pooled connections (defaults to false) instead of creating a new connection for every email maxConnections – is the count of maximum simultaneous connections to make against the SMTP server (defaults to 5) maxMessages – limits the message count to be sent using a single connection (defaults to 100).</description>
    </item>
    
    <item>
      <title>Testing SMTP</title>
      <link>https://nodemailer.com/smtp/testing/</link>
      <pubDate>Fri, 20 Jan 2017 11:20:07 +0200</pubDate>
      
      <guid>https://nodemailer.com/smtp/testing/</guid>
      <description>When building complex applications then sooner or later you end up in a situation where you need to send emails from your application in test environment but do not want to accidentally spam anyone.
One solution would be to separate development email addresses and use only some specific testing address to send all mail to but a better approach would be to use a separate email catching service that accepts all messages like a normal transactional SMTP service would but instead of delivering these to destination, it only logs these messages.</description>
    </item>
    
    <item>
      <title>OAuth2</title>
      <link>https://nodemailer.com/smtp/oauth2/</link>
      <pubDate>Fri, 20 Jan 2017 10:45:57 +0200</pubDate>
      
      <guid>https://nodemailer.com/smtp/oauth2/</guid>
      <description>OAuth2 allows your application to store and use authentication tokens instead of actual login credentials. This is great for security as tokens or valid only for specific actions and can be easily revoked thus, once stolen, can&amp;rsquo;t to as much harm as actual account credentials. OAuth2 authentication in Nodemailer is mostly used with Gmail and G Suite (née Google Apps) even though there are other providers that support it as well.</description>
    </item>
    
    <item>
      <title>Custom authentication</title>
      <link>https://nodemailer.com/smtp/customauth/</link>
      <pubDate>Fri, 20 Jan 2017 11:16:41 +0200</pubDate>
      
      <guid>https://nodemailer.com/smtp/customauth/</guid>
      <description>Available from Nodemailer v5.1.0
 Nodemailer SMTP client can be extended to use custom authentication mechanisms that Nodemailer does not support by default.
To use one you should define a custom authentication handler with customAuth in the transporter options. Multiple handlers can be defined. Use authentication identifier as the handler name. For example if the server responds with &amp;ldquo;AUTH LOGIN PLAIN MY-CUSTOM-METHOD&amp;rdquo; then it supports &amp;ldquo;LOGIN&amp;rdquo;, &amp;ldquo;PLAIN&amp;rdquo; and &amp;ldquo;MY-CUSTOM-METHOD&amp;rdquo;. Nodemailer has built in support form &amp;ldquo;LOGIN&amp;rdquo; and &amp;ldquo;PLAIN&amp;rdquo; but it knows nothing about &amp;ldquo;MY-CUSTOM-METHOD&amp;rdquo;, to add support use this identifier as the handler name.</description>
    </item>
    
    <item>
      <title>Proxy support</title>
      <link>https://nodemailer.com/smtp/proxies/</link>
      <pubDate>Fri, 20 Jan 2017 11:16:41 +0200</pubDate>
      
      <guid>https://nodemailer.com/smtp/proxies/</guid>
      <description>Nodemailer is able to use proxies for connecting to SMTP servers. HTTP proxy support is built in, Socks proxy support can be enabled by providing socks module to Nodemailer, other proxies need custom handling.
To enable proxying, define a proxy option for the transporter.
 proxy – is a proxy URL  Examples 1. Using HTTP proxy Set HTTP proxy url for the proxy option. That&amp;rsquo;s it, everything required to handle it is built into Nodemailer.</description>
    </item>
    
    <item>
      <title>Delivery status notifications</title>
      <link>https://nodemailer.com/smtp/dsn/</link>
      <pubDate>Fri, 20 Jan 2017 11:20:07 +0200</pubDate>
      
      <guid>https://nodemailer.com/smtp/dsn/</guid>
      <description>If your delivery service supports it (not all SMTP servers have DSN extension enabled), then you can use Delivery status notifications (DSN) with Nodemailer as defined in RFC3461.
To set up a DSN call, add a dsn property to message data
  dsn – optional object to define DSN options
 id – is the envelope identifier that would be included in the response (ENVID) return – is either &amp;lsquo;headers&amp;rsquo; or &amp;lsquo;full&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Sendmail transport</title>
      <link>https://nodemailer.com/transports/sendmail/</link>
      <pubDate>Fri, 20 Jan 2017 11:35:26 +0200</pubDate>
      
      <guid>https://nodemailer.com/transports/sendmail/</guid>
      <description>Sendmail transport pipes the generated RFC822 message to the standard input of the sendmail command, so it&amp;rsquo;s the same thing what the mail() function in PHP does.
To use Sendmail transport, set sendmail in Nodemailer transport options to true.
The additional options to use with this transport are the following:
 path - path to the sendmail command (defaults to &amp;lsquo;sendmail&amp;rsquo;) newline - either &amp;lsquo;windows&amp;rsquo; or &amp;lsquo;unix&amp;rsquo; (default). Forces all newlines in the output to either use Windows syntax &amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt; or Unix syntax &amp;lt;LF&amp;gt; args - an optional array of command line options to pass to the sendmail command (ie.</description>
    </item>
    
    <item>
      <title>SES transport</title>
      <link>https://nodemailer.com/transports/ses/</link>
      <pubDate>Fri, 20 Jan 2017 12:01:09 +0200</pubDate>
      
      <guid>https://nodemailer.com/transports/ses/</guid>
      <description>Nodemailer SES transport is a wrapper around aws.SES from the @aws-sdk/client-ses package. SES transport is available from Nodemailer v3.1.0.
Why not use aws-sdk directly? The SES API exposes two methods to send mail – SendEmail and SendRawEmail. While the first one is really easy to use and Nodemailer is not actually needed, then it is also quite basic in features. For example you can&amp;rsquo;t use attachments with SendEmail. On the other hand SendRawEmail requires you build your own MIME formatted email message which is far from being easy.</description>
    </item>
    
    <item>
      <title>Stream transport</title>
      <link>https://nodemailer.com/transports/stream/</link>
      <pubDate>Fri, 20 Jan 2017 12:01:09 +0200</pubDate>
      
      <guid>https://nodemailer.com/transports/stream/</guid>
      <description>Stream Transport is not actually a transport, it&amp;rsquo;s more like a testing add-on as instead of delivering the message it processes input data and returns you the generated RFC822 email message either as a stream or a Buffer. Additionally you can define which kind of newlines to use, either the &amp;lsquo;windows&amp;rsquo; style (&amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;) or the &amp;lsquo;unix&amp;rsquo; style (&amp;lt;LF&amp;gt;). This transport is mostly useful for testing and also for scenarios where you want to use Nodemailer plugins to process the message and do the actual delivery by some other means.</description>
    </item>
    
    <item>
      <title>Create plugins</title>
      <link>https://nodemailer.com/plugins/create/</link>
      <pubDate>Fri, 20 Jan 2017 23:19:31 +0200</pubDate>
      
      <guid>https://nodemailer.com/plugins/create/</guid>
      <description>There are 3 stages a plugin can hook to:
 &amp;lsquo;compile&amp;rsquo; is the step where email data is set but nothing has been done with it yet. At this step you can modify mail options, for example modify html content, add new headers etc. &amp;lsquo;stream&amp;rsquo; is the step where message tree has been compiled and is ready to be streamed. At this step you can modify the generated MIME tree or add a transform stream that the generated raw email will be piped through before passed to the transport object Transport step where the raw email is streamed to destination  Including plugins &amp;lsquo;compile&amp;rsquo; and &amp;lsquo;stream&amp;rsquo; plugins can be attached with use(plugin) method</description>
    </item>
    
    <item>
      <title>Status</title>
      <link>https://nodemailer.com/status/</link>
      <pubDate>Sat, 03 Jun 2017 12:36:15 +0300</pubDate>
      
      <guid>https://nodemailer.com/status/</guid>
      <description>All versions of Nodemailer below 4.0.1 are deprecated.</description>
    </item>
    
  </channel>
</rss>
